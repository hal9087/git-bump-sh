#!/usr/bin/env bash

source $(dirname $0)/bump_functions.sh

# ---------------------------
#
#
# RUN
#
#
# ---------------------------

current_git_branch="$(git_current_branch)"
push_flag='true'
current_tag="";
new_tag="0"
release_type=""
version_file_path_name="app/config/version.yml"

#
# PARSE OPTIONS AND ARGUMENTS
#
# options:
#
# * -h : print this help
# * -s : don't push to remote
#
while getopts 'sh' flag; do
  case "${flag}" in
    h) echo_help; exit; break;;
    s) push_flag='false' ;;
    *) echo_error "Unexpected option" true; echo_help; exit 1; break;;
  esac
done

# get arguments after or before getopt
shift $(($OPTIND - 1))
first_arg=$1

# if current branch is not master abort
if [ ! "$current_git_branch" = "master" ]; then
    echo_error "You are not on 'master' branch. Be sure to move to 'master' branch and merge your progress" true; exit 1;
fi;

#
#
# VERSION FILE ARGUMENT
#
#

if [ ! -z "$first_arg" ];
then version_file_path_name="${first_arg}"
fi

#
# GIT FETCH ALL
#
if git fetch --all
then echo_info "git fetch completed"
else echo_error "" true; exit 1;
fi


current_tag=$(git_last_tag)
if [ -z "$current_tag" ]; then
    echo_info "can't find current tag into origin/master, assume it's the first release"
fi


if [ ! -z "$current_tag" ]; then
    #
    # CHOOSE TYPE OF RELEASE (fix, minor, major)
    #
    echo "it's a fix, a minor or a major release?"
    select release in "fix" "minor" "major"; do
        case $release in
            fix ) release_type="fix"; break;;
            minor ) release_type="minor"; break;;
            major ) release_type="major"; break;;
        esac
    done

    #
    # CALCULATE NEW RELEASE TAG
    #
    IFS='. ' read -a array <<< "$current_tag"
    if [ "${release_type}" == "fix" ];
    then let array[2]=array[2]+1;
    else
        if [ "${release_type}" == "minor" ];
        then let array[1]=array[1]+1; let array[2]="0";
        else let array[0]=array[0]+1; let array[1]="0"; let array[2]="0";
        fi
    fi
    new_tag=$(join . "${array[@]}")
else
    # FIRST RELEASE
    current_tag="(none)"
    new_tag="0.1.0"
fi

if [ $(git_tag_exists ${new_tag}) = true ];
then echo_error "'${new_tag}' git tag already exists" true; exit 1;
fi;

#
# CONFIRM INFORMATION (last and new git tags)
#
echo "

INFO

last release: '${current_tag}'
next release: '${new_tag}'

"

echo "looks right?"
select yn in "Yes" "No"; do
    case $yn in
        Yes ) break;;
        No ) echo_error "not confirmed" true; exit 1;;
    esac
done

# WRITE CHAGELOG MESSAGE TO A TEMP FILE
# EDIT CHANGELOG
new_date=$(date "+(%Y-%m-%d)")
new_header="# ${new_tag} ${new_date}"

if [ "${current_tag}" = "(none)" ]; then
    new_body="$(git_log false)"
else
    new_body="$(git_log ${current_tag})"
fi

if [ -z "$new_body" ]; then
    echo_error "no changes since last version" true; exit 1;
fi

echo -e "${new_header}\n\n${new_body}\n\n" > .CHANGELOG.tmp.md;

vi .CHANGELOG.md -c ":r .CHANGELOG.tmp.md"
rm -f .CHANGELOG.tmp.md;

if [ ! -f .CHANGELOG.md ]; then
    echo_error "" true; exit 1;
fi

#
# IO / GIT OPERATIONS
#
bump_version_file ${new_tag} ${version_file_path_name}

# append changelog message
if echo -e "$(cat .CHANGELOG.md)\n\n\n$(cat CHANGELOG.md)" > CHANGELOG.md
then echo_info "CHANGELOG.md was modified"; rm -f .CHANGELOG.md;
else echo_error "" true; exit 1;
fi

# add changelog, version file and commit
git add CHANGELOG.md;
git add ${version_file_path_name};
git commit -m "
${new_tag}

${new_header}

${new_body}
";

# add a new tag
git tag -a ${new_tag} -m "${new_tag}";

# push master and the new tag to remote
if ${push_flag} == 'true'
then
    if git push origin master && git push origin ${new_tag};
    then echo_info "master and ${new_tag} were pushed"
    else echo_error "" true; exit 1;
    fi
fi

# resync dev branch
echo "resync 'dev' branch?"
select yn in "Yes" "No"; do
    case $yn in
        Yes )
            git checkout dev && git rebase master;
            if ${push_flag} == 'true'
            then
                if git push origin dev;
                then echo_info "master and ${new_tag} were pushed"
                else echo_error "can't push dev branch" true; exit 1;
                fi;
            fi;
            break;;
        No ) break;;
    esac
done

echo -e "\nINFO. done!";
