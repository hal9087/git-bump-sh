#!/usr/bin/env bash

source $(dirname $0)/bump_functions.sh

# DEFAULT OPTIONS
VERSION_FILE="version"
SILENT=false
NO_COLOR=false
PRE_CMD=""
AFTER_CMD=""
PRE_COMMIT_CMD=""
FORCE=false

# SOURCE CONFIGURATION FILE IF EXISTS
CONFIGURATION_FILE=".bumprc"
if [ -f ${CONFIGURATION_FILE} ]; then
    source ${CONFIGURATION_FILE};
fi;

CHANGES_FILE="CHANGELOG.md"
NPM_FILE="package.json"

CURRENT_TAG="";
NEW_TAG="0"
RELEASE_TYPE=""

#
# PARSE OPTIONS AND ARGUMENTS
#
for i in "$@"
do
case $i in
    -s|--silent)
    SILENT=true
    shift # past argument=value
    ;;
    --pre-cmd=*)
    PRE_CMD="${i#*=}"
    shift # past argument=value
    ;;
    --after-cmd=*)
    AFTER_CMD="${i#*=}"
    shift # past argument=value
    ;;
    --pre-commit-cmd=*)
    PRE_COMMIT_CMD="${i#*=}"
    shift # past argument=value
    ;;
    --force)
    FORCE=true
    ;;
    --no-color)
    NO_COLOR=true
    shift # past argument=value
    ;;
    --version)
    echo_version; exit 0;
    ;;
    -h|--help)
    echo_help; exit 0;
    ;;
    *)
    if ! [[ ${i} =~ ^--* ]]; then
        args+=(${i})
    else
        echo_help; echo_error "Unknown option '${i}'" true; exit 1;
    fi;
    ;;
esac
done

# EXECUTE PRE-CMD
execute_cmd "${PRE_CMD}" "pre-cmd"

if [ ${FORCE} = false ]; then
    # if current branch is not master abort
    git_check_current_branch_is_master

    # git check working directory is clean
    git_check_working_directory_clean
fi;

# VERSION FILE ARGUMENT
if ! [ -z ${args[0]} ]
then VERSION_FILE="${args[0]}"
fi

#
#
# RUN
#
# ---

# GIT FETCH ALL
git_fetch_all

# GET CURRENT LAST RELEASE TAG
CURRENT_TAG=$(git_last_tag)
if [ -z "$CURRENT_TAG" ]; then
    echo_info "can't find current tag into origin/master, assume it's the first release"
fi

if [ ! -z "$CURRENT_TAG" ]; then
    #
    # CHOOSE TYPE OF RELEASE (fix, minor, major)
    #
    echo "it's a fix, a minor or a major release?"
    select release in "fix" "minor" "major"; do
        case $release in
            fix ) RELEASE_TYPE="fix"; break;;
            minor ) RELEASE_TYPE="minor"; break;;
            major ) RELEASE_TYPE="major"; break;;
        esac
    done

    #
    # CALCULATE NEW RELEASE TAG
    #
    IFS='. ' read -a array <<< "$CURRENT_TAG"
    if [ "${RELEASE_TYPE}" == "fix" ];
    then let array[2]=array[2]+1;
    else
        if [ "${RELEASE_TYPE}" == "minor" ];
        then let array[1]=array[1]+1; let array[2]="0";
        else let array[0]=array[0]+1; let array[1]="0"; let array[2]="0";
        fi
    fi
    NEW_TAG=$(join . "${array[@]}")
else
    # FIRST RELEASE
    CURRENT_TAG="(none)"
    NEW_TAG="0.1.0"
fi

# IF NEW TAG ALREADY EXISTS, ABORT
if [ $(git_tag_exists ${NEW_TAG}) = true ];
then echo_error "'${NEW_TAG}' git tag already exists" true; exit 1;
fi;

# CONFIRM VERSIONS
echo_confirmation ${CURRENT_TAG} ${NEW_TAG}

# BUILD MESSAGE PARTS
NEW_DATE=$(date "+(%Y-%m-%d)")
NEW_HEADER="# ${NEW_TAG} ${NEW_DATE}"
if [ "${CURRENT_TAG}" = "(none)" ]; then
    NEW_BODY="$(git_log false)"
else
    NEW_BODY="$(git_log ${CURRENT_TAG})"
fi


if [ -z "$NEW_BODY" ]; then
    echo_error "no changes since last version" true; exit 1;
fi


#
#
# IO / GIT OPERATIONS
#
#--------------------
GIT_MESSAGE="${NEW_TAG}

${NEW_HEADER}

${NEW_BODY}
"

# WRITE CHAGELOG MESSAGE TO A TEMP FILE
write_temp_changelog_md "${NEW_HEADER}\n\n${NEW_BODY}\n\n"

# WRITE VERSION FILE
bump_version_file ${NEW_TAG} ${VERSION_FILE}

# UPDATE package.json
if [ $(is_npm_project) = true ]; then
    bump_npm_package_version ${NEW_TAG} ${NPM_FILE}
fi;

# APPEND NEW MESSAGE TO CHANGES FILE
update_changes ${CHANGES_FILE}

# EXECUTE PRE COMMIT CMD
execute_cmd "${PRE_COMMIT_CMD}" "pre-commit-cmd"

# GIT ADD & COMMIT
git_add ${CHANGES_FILE} ${VERSION_FILE}

if [ $(is_npm_project) = true ]; then
    git_add ${NPM_FILE}
fi;

git_commit "${GIT_MESSAGE}"

# GIT ADD TAG
git_add_tag ${NEW_TAG} "${GIT_MESSAGE}"

# GIT PUSH MASTER AND TAG
git_push ${NEW_TAG} ${SILENT}

# GIT "RESYNC" DEV BRANCH (REBASE AND PUSH)
git_resync_dev_branch ${SILENT}

# EXECUTE AFTER COMMAND
execute_cmd "${AFTER_CMD}" "after-cmd"

echo ""
echo_success "DONE!";
